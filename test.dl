#include "vector.dl"
#define VEC1 @insort(@insort(@insort(@insort(@insort(@insort(@insort(EMPTY, 17), 32), 24),19),48),17),17)
#define VEC2 @insort(@insort(@insort(@insort(@insort(EMPTY, 17),19),48),17),17)
#define VEC3 @insort(@insort(@insort(@insort(@insort(EMPTY, 37),19),48),17),0)
#define VEC4 @insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort( \
    @insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(EMPTY, 37),19),48),17),0),1),2),3),4),5),6),7),8),9),10),11),12),13),14),15),16),17),18),19),20),21),22),23),24),25)
.decl foo(x : set)
//foo(@mypush(17,@mypush(42,@mypush(3, EMPTY)))) :- true.
//foo(@insort(@insort(@insort(@insort(@insort(@insort(@insort(EMPTY, 17), 32), 24),19),48),17),17)) :- true.
//foo(@inter(VEC2,VEC2)) :- true.
foo(VEC4) :- true.
foo(REM(SING(10),10)) :- true.
//foo(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort(@insort([0,0], 37),19),48),17),0),1),2),3),4),5),6),7),8),9),10),11),12),13),14),15),16),17),18),19),20),21),22),23),24)) :- true.
.decl bar (t : symbol, x : number, i : unsigned)
bar("t1", @myindex(v,i), i) :- foo(v), i = range(0,size),  v = [size,_data].
bar("t2", @myindex(v,i), i) :- v = @inter(VEC2,VEC1), i = range(0,3).
bar("t3", @myindex(v,i), i) :- v = @inter(VEC3,VEC2), i = range(0,3).
bar("t4", @myindex(v,i), i) :- v = VEC3, i = range(0,5).
bar("t5", @myindex(v,i), i) :- v = VEC2, i = range(0,3).
bar("t6", @myindex(v,i), i) :- v = @set_union(VEC3,VEC1), i = range(0,7).
bar("t7", @myindex(v,i), i) :- v = @set_diff(VEC3,VEC1), i = range(0,2).
bar("t8", @myindex(v,i), i) :- v = @set_diff(VEC2,VEC3), i = range(0,0).
bar("t9", @myindex(v,i), i) :- v = @set_diff(VEC2,VEC2), i = range(0,0).
bar("t10", @myindex(v,i), i) :- v = REM(SING(10),10), i = range(0,0).


.decl biz(t : symbol, x : bool)
biz("t0",@is_subset(EMPTY, EMPTY)) :- true.
biz("t-1", @is_subset(@insort(EMPTY,3), EMPTY)) :- true.
biz("t-2", @is_subset(@insort(EMPTY,3), @insort(EMPTY,3))) :- true.

biz("t1", @is_subset(VEC1, VEC2)) :- true.
biz("t2", @is_subset(VEC2, VEC1)) :- true.
biz("t3", @is_subset(VEC3, VEC2)) :- true.
biz("t4", @is_subset(VEC3, VEC1)) :- true.
biz("t5", @is_subset(VEC1, VEC3)) :- true.
biz("t6", @is_subset(VEC2, VEC3)) :- true.

//biz("t7",as(size,bool)) :- VEC3 = [size,_data].


.output foo(IO=stdout)
.output bar(IO=stdout)
.output biz(IO=stdout)

/*

bitsets for finite propositional reasoning.
intsets
( , ctx) <= ( , , ctx2) :- @is_subset(ctx2,ctx).

[,0,0,0,0,0] nil filled and sorted. bitonic sort? Just not worth it.
What is the max number of fields a souffle record supports anyway?
Hmm. Maybe it isn't arbitrary


*/